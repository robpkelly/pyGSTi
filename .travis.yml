dist: xenial
language: python

python: 3.7

if: (branch IN (master, beta, develop, ci-fixes)) OR (tag IS present)

env:
  global:
    - NOSEOPTS_DEFAULT="-v --with-timer --with-id --rednose"
    - NOSEOPTS_PARALLEL="--processes=-1 --process-timeout=2400" # timeout after 40 minutes (travis job timeout is 50 minutes)
    - NOSEOPTS_ALL="$NOSEOPTS_DEFAULT $NOSEOPTS_PARALLEL"
  matrix:
    - NOSETESTS="drivers objects" NOSEOPTS=$NOSEOPTS_ALL # first in build mx because long duration
    - NOSETESTS="algorithms" NOSEOPTS=$NOSEOPTS_ALL
    - NOSETESTS="algorithmsb" NOSEOPTS=$NOSEOPTS_ALL
    - NOSETESTS="tools iotest optimize construction extras" NOSEOPTS=$NOSEOPTS_ALL
    - NOSETESTS="report" NOSEOPTS=$NOSEOPTS_ALL
    - NOSETESTS="reportb" NOSEOPTS=$NOSEOPTS_ALL
    - NOSETESTS="mpi" NOSEOPTS=$NOSEOPTS_DEFAULT # cannot be run in parallel

# Install native package dependencies & initialize build environment
before_install:
  - >
    sudo apt-get update -qq -y &&
    sudo apt-get install -qq -y
    gfortran libblas-dev liblapack-dev openmpi-bin openmpi-common openssh-client
    openssh-server libopenmpi1.10 libopenmpi-dev libsuitesparse-dev
  - cmake --version
  - gcc --version

install:
  # Install base dependencies
  - pip install -e .
  # Install test dependencies
  - pip install -e .[testing]

# Default `test' stage script
script:
  - echo "Skipping tests (don't worry, it's fine!)"
  # - cd test/test_packages
  # - nosetests $NOSEOPTS $NOSETESTS

# Cache pip packages
cache:
  pip: true
  timeout: 1000

stages:
  - name: lint
    if: NOT branch IN (master, beta)
  - name: lint-comprehensive
    if: branch IN (master, beta)
  - test
  # Run tests on python 2.7 & 3.5, but only on master/beta
  - name: test-extra
    if: branch IN (master, beta)
  - name: push
    if: (branch = develop) AND (NOT (type = pull_request))
  - name: deploy
    if: tag IS present

jobs:
  include:
    - &lint-job
      stage: lint
      name: "PEP8"
      python: 3.7
      before_install: skip
      install:
        - pip install flake8
      script:
        - python -m flake8 --statistics $LINTOPTS packages/pygsti
    - <<: *lint-job
      name: "Critical errors"
      env: LINTOPTS="--config=.flake8-critical"
    - <<: *lint-job
      stage: lint-comprehensive
      name: "Comprehensive linting"

    # Can't use matrix expansion for included jobs or custom stages, so we'll manually list extra jobs
    - stage: test-extra
      python: 3.5
      env: NOSETESTS="drivers objects" NOSEOPTS=$NOSEOPTS_ALL
    - stage: test-extra
      python: 3.5
      env: NOSETESTS="algorithms" NOSEOPTS=$NOSEOPTS_ALL
    - stage: test-extra
      python: 3.5
      env: NOSETESTS="algorithmsb" NOSEOPTS=$NOSEOPTS_ALL
    - stage: test-extra
      python: 3.5
      env: NOSETESTS="tools iotest optimize construction extras" NOSEOPTS=$NOSEOPTS_ALL
    - stage: test-extra
      python: 3.5
      env: NOSETESTS="report" NOSEOPTS=$NOSEOPTS_ALL
    - stage: test-extra
      python: 3.5
      env: NOSETESTS="reportb" NOSEOPTS=$NOSEOPTS_ALL
    - stage: test-extra
      python: 3.5
      env: NOSETESTS="mpi" NOSEOPTS=$NOSEOPTS_ALL

    - stage: test-extra
      python: 2.7
      env: NOSETESTS="drivers objects" NOSEOPTS=$NOSEOPTS_ALL
    - stage: test-extra
      python: 2.7
      env: NOSETESTS="algorithms" NOSEOPTS=$NOSEOPTS_ALL
    - stage: test-extra
      python: 2.7
      env: NOSETESTS="algorithmsb" NOSEOPTS=$NOSEOPTS_ALL
    - stage: test-extra
      python: 2.7
      env: NOSETESTS="tools iotest optimize construction extras" NOSEOPTS=$NOSEOPTS_ALL
    - stage: test-extra
      python: 2.7
      env: NOSETESTS="report" NOSEOPTS=$NOSEOPTS_ALL
    - stage: test-extra
      python: 2.7
      env: NOSETESTS="reportb" NOSEOPTS=$NOSEOPTS_ALL
    - stage: test-extra
      python: 2.7
      env: NOSETESTS="mpi" NOSEOPTS=$NOSEOPTS_ALL

    - stage: push
      env: PUSH_BRANCH="beta"
      install: skip
      before_install:
        - >-
          openssl aes-256-cbc
          -K $encrypted_8f2a7a9a4246_key
          -iv $encrypted_8f2a7a9a4246_iv
          -in CI/github_deploy_key.enc
          -out CI/github_deploy_key
          -d
        - chmod 600 CI/github_deploy_key
        - eval $(ssh-agent -s)
        - ssh-add CI/github_deploy_key
      script:
        - CI/push.sh

    - stage: deploy
      env: PYPI_DEPLOY=1
      install:
        - pip install -e .[extension_modules]
      script:
        - echo "Pushing $TRAVIS_TAG to PyPI"


  allow_failures:
    - stage: lint
      name: "PEP8"

deploy:
  provider: pypi
  user: "$TEST_PYPI_USER"
  password: "$TEST_PYPI_AUTH"
  server: https://test.pypi.org/simple/
  distributions: "sdist bdist_wheel"
  skip_existing: true
  on:
    tags: true
    condition: $PYPI_DEPLOY = 1

notifications:
  email:
    on_success: change
    on_failure: always
